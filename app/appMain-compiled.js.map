{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app/appMain.lsc","webpack:///./app/components/bluetooth/blueToothMain.lsc","webpack:///./app/components/bluetooth/handleScanResults.lsc","webpack:///./app/components/debugWindow/debugWindow.lsc","webpack:///./app/components/lockSystem/lockCheck.lsc","webpack:///./app/components/lockSystem/lockSystem.lsc","webpack:///./app/components/logging/customRollbarTransport.lsc","webpack:///./app/components/logging/logSettingsUpdates.lsc","webpack:///./app/components/logging/logging.lsc","webpack:///./app/components/logging/userDebugLogger.lsc","webpack:///./app/components/runOnStartup.lsc","webpack:///./app/components/setUpDev.lsc","webpack:///./app/components/settings/devices.lsc","webpack:///./app/components/settings/settings.lsc","webpack:///./app/components/settings/settingsDefaults.lsc","webpack:///./app/components/settings/settingsIPClisteners.lsc","webpack:///./app/components/settings/settingsObservers.lsc","webpack:///./app/components/settingsWindow/settingsWindow.lsc","webpack:///./app/components/tray/tray.lsc","webpack:///./app/components/utils.lsc","webpack:///./config/env.lsc","webpack:///external \"auto-launch\"","webpack:///external \"dotenv\"","webpack:///external \"electron\"","webpack:///external \"electron-reload\"","webpack:///external \"gawk\"","webpack:///external \"is-empty\"","webpack:///external \"lock-system\"","webpack:///external \"lowdb\"","webpack:///external \"lowdb/adapters/FileSync\"","webpack:///external \"path\"","webpack:///external \"rollbar\"","webpack:///external \"timeproxy\"","webpack:///external \"typa\"","webpack:///external \"url\"","webpack:///external \"util\"","webpack:///external \"winston\""],"names":["electronApp","makeSingleInstance","noop","quit","once","firstRun","on","process","bailOnFatalError","url","format","protocol","slashes","pathname","path","resolve","__dirname","show","webPreferences","experimentalFeatures","scannerWindow","createBluetoothScannerWindow","then","scanforDevices","Promise","BrowserWindow","bluetoothHiddenWindowProperties","loadURL","bluetoothHiddenWindowHTMLpath","webContents","openDevTools","mode","handleScanResults","event","logger","error","blueLossEnabled","scanIn20Seconds","debug","executeJavaScript","invokeUserGesture","catch","handleRequestDeviceError","setTimeout","tp","TWENTY_SECONDS","err","name","init","dedupeDeviceList","addTimeStampToSeenDevices","sendDevicesCanSeeToSettingsWindow","deviceList","callback","preventDefault","devicesToSearchFor","processDeviceListAndSendToSettingsWindow","updateDevicesToSearchFor","processedDeviceList","settingsWindow","send","devicesCanSee","deviceId","Date","now","device","lastSeen","reduce","newDeviceList","newDevice","find","newDeviceId","existingDevice","betterNamedDevice","filter","deviceName","length","debugWindow","debugMode","createDebugWindow","debugWindowHTMLpath","close","showDebugWindow","timeToLock","deviceHasBeenLost","lastTimeSawDevice","lockSystemIfDeviceLost","lockTheSystem","rollbarLogger","Rollbar","accessToken","env","rollbarAccessToken","enabled","captureUncaught","captureUnhandledRejections","environment","reportLevel","payload","mainOrRenderer","platform","processVersions","versions","arch","BlueLossVersion","transform","server","winston","transports","CustomLogger","options","Object","assign","util","inherits","CustomRollbarTransport","Transport","prototype","log","level","msg","createRollbarLogger","newSettingKey","newSettingValue","is","obj","debugMessage","logSettingsUpdateForDebugMode","handleExceptions","humanReadableUnhandledException","Logger","exitOnError","add","Console","UserDebugLoggerTransport","userDebugTransportOptions","configure","rollbarTransportOptions","remove","ipcMain","initLogging","addRollbarLogging","removeRollbarLogging","meta","isError","consoleMethod","loggerMessage","createObjectStringForLog","omitGawkFromSettings","omitInheritedProperties","cleanMetaObject","cleanedMetaObj","stack","split","JSON","stringify","AutoLaunch","isHidden","blueLossAutoLauncher","enable","disable","enableRunOnStartup","disableRunOnStartup","join","settingsWindowDirPath","debugWindowDirPath","require","settingsWindowHTMLfilePath","settingsWindowCSSfilePath","settingsWindowJSfilePath","settingsWindowIconFiles","debugWindowHTMLfilePath","debugWindowJSfilePath","bluetoothRendererJSfilePath","addDevToolsExtension","devtronPath","showSettingsWindow","setUpDev","deviceToAdd","deviceIsInDevicesToSearchFor","deviceToRemove","filterDevicesToSearchFor","deviceIdToRemove","newTimeStamp","deviceToUpdate","addNewDeviceToSearchFor","removeNewDeviceToSearchFor","updateTimeStampForAllDevicesSearchingFor","updateTimeStampForSingleDeviceSearchingFor","getPath","db","settings","FileSync","settingsDBpath","adapter","defaults","defaultSettings","write","getState","set","initSettings","updateSetting","getSettings","runOnStartup","trayIconColor","reportErrors","settingsWindowPosition","settingName","settingValue","initSettingsIPClisteners","gawk","watch","changeTrayIcon","initSettingsObservers","settingsWindowRendererDirPath","width","height","title","autoHideMenuBar","resizable","fullscreenable","fullscreen","frame","textAreasAreResizable","devTools","ISDEV","returnValue","settingsWindowProperties","getStoredWindowPosition","icon","getIconPath","settingsHTMLpath","setMenu","Menu","buildFromTemplate","role","getBounds","x","y","iconsDir","iconFileName","isVisible","toggleSettingsWindow","tray","Tray","getNewTrayIconPath","setContextMenu","createContextMenu","setToolTip","label","click","generateEnabledDisabledLabel","toggleEnabledFromTray","trayIconsFolder","newTrayIconColor","setImage","initTrayMenu","updateTrayMenu","version","appVersion","fns","result","fn","param","FIVE_HUNDRED_WEEKS","propertyFiltersArr","keys","newObj","propName","propertyToFilter","recursivelyOmitObjProperties","getOwnPropertyNames","today","getHours","getMinutes","getSeconds","console","exit","THREE_SECONDS","pipe","identity","tenYearsFromNow","getProperAppVersion","generateLogTimeStamp","dotenv","config"],"mappings":"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","file":"appMain-compiled.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app/appMain.lsc\");\n","import '../config/env.lsc'\r\nimport { app as electronApp } from 'electron'\r\n\r\nimport { getSettings, updateSetting, initSettings } from './components/settings/settings.lsc'\r\nimport { initLogging } from './components/logging/logging.lsc'\r\nimport { setUpDev } from './components/setUpDev.lsc'\r\nimport { init as startBluetoothScanning } from './components/bluetooth/blueToothMain.lsc'\r\nimport { noop, bailOnFatalError } from './components/utils.lsc'\r\nimport { initTrayMenu } from './components/tray/tray.lsc'\r\nimport { showSettingsWindow } from './components/settingsWindow/settingsWindow.lsc'\r\nimport { enableRunOnStartup } from './components/runOnStartup.lsc'\r\n\r\nif electronApp.makeSingleInstance(noop): electronApp.quit()\r\n\r\nelectronApp.once('ready', ():void ->\r\n  initSettings()\r\n  initLogging()\r\n  initTrayMenu()\r\n  startBluetoothScanning()\r\n  setUpDev()\r\n\r\n  { firstRun } = getSettings()\r\n  if firstRun:\r\n    updateSetting('firstRun', !firstRun)\r\n    showSettingsWindow()\r\n    enableRunOnStartup(firstRun)\r\n)\r\n\r\nelectronApp.on('window-all-closed', noop)\r\nelectronApp.on('before-quit', () -> updateSetting('debugMode', false))\r\n\r\nprocess.on('unhandledRejection', bailOnFatalError)\r\nprocess.on('uncaughtException', bailOnFatalError)\r\n","import path from 'path'\r\nimport url from 'url'\r\nimport { BrowserWindow } from 'electron'\r\n\r\nimport tp from 'timeproxy'\r\n\r\nimport { handleScanResults } from './handleScanResults.lsc'\r\nimport { logger } from '../logging/logging.lsc'\r\nimport { getSettings } from '../settings/settings.lsc'\r\nimport { lockSystemIfDeviceLost } from '../lockSystem/lockCheck.lsc'\r\n\r\nbluetoothHiddenWindowHTMLpath = url.format({\r\n  protocol: 'file',\r\n  slashes: true,\r\n  pathname: path.resolve(__dirname, 'components', 'bluetooth', 'renderer', 'bluetoothHiddenWindow.html')\r\n})\r\nbluetoothHiddenWindowProperties = {\r\n  show: false,\r\n  webPreferences: {\r\n    experimentalFeatures: true // for web-bluetooth\r\n  }\r\n}\r\ninvokeUserGesture = true\r\nlet scannerWindow = null  // so it doesn't get garbage collected\r\n\r\ninit():void ->\r\n  createBluetoothScannerWindow().then(scanforDevices)\r\n\r\ncreateBluetoothScannerWindow():Promise ->\r\n  new Promise((resolve):void ->\r\n    now scannerWindow = new BrowserWindow(bluetoothHiddenWindowProperties)\r\n    scannerWindow.loadURL(bluetoothHiddenWindowHTMLpath)\r\n    if ISDEV: scannerWindow.webContents.openDevTools({ mode: 'undocked'})\r\n\r\n    scannerWindow.webContents.once('dom-ready', resolve)\r\n    scannerWindow.webContents.on('select-bluetooth-device', handleScanResults)\r\n    scannerWindow.webContents.once('crashed', (event):void ->\r\n      logger.error('scannerWindow.webContents crashed', event)\r\n    )\r\n    scannerWindow.once('unresponsive', (event):void ->\r\n      logger.error('scannerWindow unresponsive', event)\r\n    )\r\n  )\r\n\r\nscanforDevices():void ->\r\n  if !getSettings().blueLossEnabled: return scanIn20Seconds()\r\n  logger.debug('=======New Scan Started=======')\r\n  scannerWindow.webContents\r\n    .executeJavaScript(\r\n      `navigator.bluetooth.requestDevice({acceptAllDevices: true})`,\r\n      invokeUserGesture\r\n    )\r\n    .catch(handleRequestDeviceError)\r\n\r\n  lockSystemIfDeviceLost()\r\n  scanIn20Seconds()\r\n\r\nscanIn20Seconds():void ->\r\n  setTimeout(scanforDevices, tp.TWENTY_SECONDS)\r\n\r\n/**\r\n * NotFoundError is the norm.\r\n */\r\nhandleRequestDeviceError(err):void ->\r\n  if err?.name !== 'NotFoundError': logger.error(err)\r\n\r\nexport {\r\n  init,\r\n}\r\n\r\n","import isEmpty from 'is-empty'\r\n\r\nimport { logger } from '../logging/logging.lsc'\r\n\r\nimport { getSettings } from '../settings/settings.lsc'\r\nimport { updateTimeStampForSingleDeviceSearchingFor } from '../settings/devices.lsc'\r\nimport { settingsWindow } from '../settingsWindow/settingsWindow.lsc'\r\nimport { pipe } from '../utils.lsc'\r\n\r\nprocessDeviceListAndSendToSettingsWindow = pipe(\r\n  dedupeDeviceList, addTimeStampToSeenDevices, sendDevicesCanSeeToSettingsWindow\r\n)\r\n/**\r\n * Note: handleScanResults doesn't get called from\r\n * ` scannerWindow.webContents.on('select-bluetooth-device', handleScanResults)`\r\n * if there are no results from the\r\n * `executeJavaScript(`navigator.bluetooth.requestDevice({acceptAllDevices: true})`, true)`\r\n * call. That's why we do the lockCheck in scanforDevices.\r\n */\r\nhandleScanResults(event, deviceList:Array<DeviceType>, callback):void ->\r\n  event.preventDefault()\r\n  logger.debug(`Found these Bluetooth devices in scan: `, { deviceList })\r\n  { devicesToSearchFor } = getSettings()\r\n  processDeviceListAndSendToSettingsWindow(deviceList)\r\n  if isEmpty(devicesToSearchFor): return\r\n  updateDevicesToSearchFor(devicesToSearchFor, deviceList)\r\n  callback('')  // http://bit.ly/2kZhD74\r\n\r\nsendDevicesCanSeeToSettingsWindow(processedDeviceList:Array<DeviceType>):void ->\r\n  settingsWindow?.webContents?.send(\r\n    'mainprocess:update-of-bluetooth-devices-can-see',\r\n    { devicesCanSee: processedDeviceList }\r\n  )\r\n/**\r\n* If any devices we are looking for showed up in the latest scan,\r\n* update the device's lastSeen value to now in devicesToSearchFor.\r\n*/\r\nupdateDevicesToSearchFor(devicesToSearchFor:Object, deviceList:Array<DeviceType>):void ->\r\n  for elem { deviceId } in deviceList:\r\n    if devicesToSearchFor[deviceId]:\r\n      updateTimeStampForSingleDeviceSearchingFor(deviceId, Date.now())\r\n\r\naddTimeStampToSeenDevices(deviceList: Array<DeviceType>):Array<DeviceType> ->\r\n  [ ...for elem device in deviceList: [{...device, lastSeen: Date.now()}] ]\r\n\r\n/*****\r\n* Check for duplicates in deviceList cause of this bug (which I've run into too):\r\n* https://github.com/electron/electron/issues/10800\r\n* We remove duplicates, but also for any duplicates, we prefer to take the duplicate\r\n* that has a device name (sometimes they have an empty string for a device name).\r\n*/\r\ndedupeDeviceList(deviceList: Array<DeviceType>):Array<DeviceType> ->\r\n  deviceList.reduce((newDeviceList, newDevice) ->\r\n    newDeviceId = newDevice.deviceId\r\n    existingDevice = newDeviceList.find(device -> device.deviceId === newDeviceId )\r\n    if !existingDevice: return [...newDeviceList, newDevice]\r\n    if betterNamedDevice(existingDevice, newDevice):\r\n      return [...newDeviceList.filter(device -> device.deviceId !== newDeviceId ), newDevice]\r\n    newDeviceList\r\n  , [])\r\n\r\nbetterNamedDevice(existingDevice:Object, newDevice:Object):Boolean ->\r\n  existingDevice.deviceName.length === 0 and newDevice.deviceName.length > 0\r\n\r\nexport {\r\n  handleScanResults,\r\n}\r\n","import path from 'path'\r\nimport url from 'url'\r\nimport { BrowserWindow } from 'electron'\r\n\r\nimport { logger } from '../logging/logging.lsc'\r\nimport { getSettings } from '../settings/settings.lsc'\r\nimport { settingsWindow } from '../settingsWindow/settingsWindow.lsc'\r\n\r\ndebugWindowHTMLpath = url.format({\r\n  protocol: 'file',\r\n  slashes: true,\r\n  pathname: path.resolve(__dirname, 'components', 'debugWindow', 'renderer', 'debugWindow.html')\r\n})\r\nlet debugWindow = null\r\n\r\nshowDebugWindow():void ->\r\n  if !getSettings().debugMode: return\r\n  if debugWindow:\r\n    return debugWindow.webContents.openDevTools({ mode: 'undocked'})\r\n  createDebugWindow()\r\n\r\ncreateDebugWindow():void ->\r\n  now debugWindow = new BrowserWindow({ show: false})\r\n  debugWindow.loadURL(debugWindowHTMLpath)\r\n  debugWindow.webContents.openDevTools({ mode: 'undocked'})\r\n\r\n  debugWindow.once('closed', ():void ->\r\n    now debugWindow = null\r\n  )\r\n  /**\r\n   * Without a delay, the console has trouble showing the VM:line to the right of\r\n   * what you just logged, instead it shows (unknown) which kinda looks like we're\r\n   * printing 'Current BlueLoss settings: (unknown)'\r\n   */\r\n  debugWindow.webContents.once('devtools-opened', ():void ->\r\n    logger.debug('Current BlueLoss settings:', getSettings())\r\n  )\r\n  debugWindow.webContents.once('devtools-closed', ():void ->\r\n    settingsWindow?.webContents?.send('mainprocess:setting-updated-in-main', {debugMode: false})\r\n    debugWindow.close()\r\n  )\r\n  debugWindow.webContents.once('crashed', (event):void ->\r\n    logger.error('debugWindow.webContents crashed', event)\r\n  )\r\n  debugWindow.once('unresponsive', (event):void ->\r\n    logger.error('debugWindow unresponsive', event)\r\n  )\r\n\r\nexport {\r\n  debugWindow,\r\n  showDebugWindow,\r\n}\r\n","import tp from 'timeproxy'\r\n\r\nimport { tenYearsFromNow } from '../utils.lsc'\r\nimport { lockTheSystem } from './lockSystem.lsc'\r\nimport { getSettings } from '../settings/settings.lsc'\r\nimport { updateTimeStampForSingleDeviceSearchingFor } from '../settings/devices.lsc'\r\n\r\n/**\r\n  * If a device is lost we lock the computer, however, after that, if\r\n  * the computer is unlocked without the device coming back, we don't want\r\n  * to keep locking the computer because the device is still lost. So we\r\n  * give the device that has just been lost a lastSeen value of 10 years\r\n  * from now (not using Infinity cause it doesn't JSON.stringify for storage).\r\n  */\r\nlockSystemIfDeviceLost():void ->\r\n  { devicesToSearchFor, timeToLock, blueLossEnabled } = getSettings()\r\n  for val { lastSeen, deviceId } in devicesToSearchFor:\r\n    if deviceHasBeenLost(lastSeen, timeToLock):\r\n      lockTheSystem(blueLossEnabled)\r\n      updateTimeStampForSingleDeviceSearchingFor(deviceId, tenYearsFromNow())\r\n\r\n\r\ndeviceHasBeenLost(lastTimeSawDevice: number, timeToLock: number):boolean ->\r\n  Date.now() > (lastTimeSawDevice + tp`${ timeToLock } minutes`)\r\n\r\nexport {\r\n  lockSystemIfDeviceLost\r\n}\r\n","import lockSystem from 'lock-system'\r\n\r\nimport { logger } from '../logging/logging.lsc'\r\n\r\nlockTheSystem(blueLossEnabled: Boolean):void ->\r\n  if !blueLossEnabled: return\r\n  // lockSystem throws on error, so use try/catch\r\n  try:\r\n    lockSystem()\r\n  catch(err):\r\n    logger.error('Error occured trying to lock the system : ', err)\r\n\r\n\r\nexport {\r\n  lockTheSystem,\r\n}\r\n","import util from 'util'\r\n\r\nimport winston from 'winston'\r\nimport Rollbar from 'rollbar'\r\n\r\nimport { getProperAppVersion } from '../utils.lsc'\r\n\r\nlet rollbarLogger = null\r\n\r\ncreateRollbarLogger():void ->\r\n  now rollbarLogger = new Rollbar({\r\n    accessToken: process.env.rollbarAccessToken,\r\n    enabled: false,\r\n    captureUncaught: true,\r\n    captureUnhandledRejections: true,\r\n    environment: process.env.NODE_ENV,\r\n    reportLevel: 'error',\r\n    payload: {\r\n        mainOrRenderer: 'main',\r\n        platform: process.platform,\r\n        processVersions: process.versions,\r\n        arch: process.arch,\r\n        BlueLossVersion: getProperAppVersion()\r\n      },\r\n      // Ignore the server stuff cause that includes info about the host pc name.\r\n      transform(payload){\r\n        payload.server = {}\r\n      },\r\n  })\r\n\r\nCustomRollbarTransport = winston.transports.CustomLogger = (options):void ->\r\n  Object.assign(this, options)\r\n\r\nutil.inherits(CustomRollbarTransport, winston.Transport)\r\n\r\nCustomRollbarTransport.prototype.log = (level, msg = '', error, callback):void ->\r\n  // Only log errors.\r\n  if level !== 'error': return\r\n  rollbarLogger.error(msg, error)\r\n  callback(null, true)\r\n\r\n\r\nexport {\r\n  CustomRollbarTransport,\r\n  rollbarLogger,\r\n  createRollbarLogger,\r\n}\r\n","import is from 'typa'\r\n\r\n\r\nimport { getSettings } from '../settings/settings.lsc'\r\nimport { logger } from './logging.lsc'\r\n\r\nlogSettingsUpdateForDebugMode(newSettingKey: string, newSettingValue: SettingsTypes):void ->\r\n  /*****\r\n  * Check if the logger is instantiated first as logSettingsUpdateForDebugMode gets\r\n  * called early on startup.\r\n  */\r\n  if !getSettings().debugMode || !logger?.debug: return\r\n  debugMessage = `Updated Setting: updated '${ newSettingKey }' with:`\r\n  if is.obj(newSettingValue):\r\n    logger.debug(debugMessage, { [newSettingKey]: newSettingValue })\r\n  else:\r\n    logger.debug(`${ debugMessage } ${ newSettingValue }`)\r\n\r\n\r\nexport {\r\n  logSettingsUpdateForDebugMode\r\n}\r\n","\r\nimport { ipcMain } from 'electron'\r\nimport winston from 'winston'\r\n\r\nimport { CustomRollbarTransport, rollbarLogger, createRollbarLogger } from './customRollbarTransport.lsc'\r\nimport { UserDebugLoggerTransport } from './userDebugLogger.lsc'\r\nimport { getSettings } from '../settings/settings.lsc'\r\n\r\nlet logger = null\r\nrollbarTransportOptions = {\r\n  name: 'rollbarTransport',\r\n  level: 'error',\r\n  handleExceptions: true,\r\n  humanReadableUnhandledException: true,\r\n}\r\nuserDebugTransportOptions = {\r\n  name: 'userDebugTransport',\r\n  level: 'debug',\r\n  handleExceptions: true,\r\n  humanReadableUnhandledException: true,\r\n}\r\n\r\ninitLogging():void ->\r\n  /*****\r\n  * Note: we're using the old Winston 2.4 branch: https://github.com/winstonjs/winston/tree/2.4.0\r\n  */\r\n  now logger = new winston.Logger({\r\n    level: 'debug',\r\n    exitOnError: false\r\n  })\r\n\r\n  if ISDEV:\r\n    logger.add(winston.transports.Console, {\r\n      handleExceptions: true,\r\n      humanReadableUnhandledException: true,\r\n      // json: true\r\n    })\r\n\r\n  createRollbarLogger()\r\n\r\n  // dont send errors to rollbar in dev && only if enabled.\r\n  if !ISDEV and getSettings().reportErrors:\r\n    addRollbarLogging()\r\n\r\n  logger.add(UserDebugLoggerTransport, userDebugTransportOptions)\r\n/**\r\n* We also need to enable/disable the rollbar module itself as well,\r\n* as it is set to report uncaught exceptions as well as logging\r\n* caught errors.\r\n*/\r\naddRollbarLogging():void ->\r\n  rollbarLogger.configure({enabled: true})\r\n  logger.add(CustomRollbarTransport, rollbarTransportOptions)\r\n\r\nremoveRollbarLogging():void ->\r\n  rollbarLogger.configure({enabled: false})\r\n  logger.remove('rollbarTransport')\r\n\r\nipcMain.on('settings-renderer:error-sent', (event, error):void ->\r\n  logger.error('settings-renderer:error-sent', error)\r\n)\r\nipcMain.on('bluetooth-scan-window-renderer:error-sent', (event, error):void ->\r\n  logger.error('bluetooth-scan-window-renderer:error-sent', error)\r\n)\r\n\r\n\r\nexport {\r\n  logger,\r\n  initLogging,\r\n  addRollbarLogging,\r\n  removeRollbarLogging,\r\n}\r\n","import util from 'util'\r\n\r\nimport winston from 'winston'\r\nimport isEmpty from 'is-empty'\r\n\r\nimport { debugWindow } from '../debugWindow/debugWindow.lsc'\r\nimport { omitInheritedProperties, noop, generateLogTimeStamp, pipe, omitGawkFromSettings } from '../utils.lsc'\r\n\r\n/****\r\n* This is the loggger for when the user checks the \"debug\" checkbox in the options\r\n* window. The log data is sent to the debug window renderer devtools console.\r\n*/\r\nUserDebugLoggerTransport = winston.transports.CustomLogger = (options):void ->\r\n  Object.assign(this, options)\r\n\r\nutil.inherits(UserDebugLoggerTransport, winston.Transport)\r\n\r\nUserDebugLoggerTransport.prototype.log = (level, msg = '', meta = {}, callback):void ->\r\n  isError = level === 'error'\r\n  loggerMessage = if isError: 'Error:' else: msg\r\n  consoleMethod = if isError: 'error' else: 'log'\r\n\r\n  debugWindow?.webContents?.executeJavaScript?(\r\n    `console.${ consoleMethod }(\\`${ generateLogTimeStamp() }  ${ loggerMessage }\\n\\`, ${ createObjectStringForLog(meta) });`\r\n  ).catch(noop)\r\n\r\n  callback(null, true)\r\n\r\ncleanMetaObject = pipe(omitGawkFromSettings, omitInheritedProperties)\r\n\r\ncreateObjectStringForLog(meta:Object):Object ->\r\n  cleanedMetaObj = cleanMetaObject(meta)\r\n  if isEmpty(cleanedMetaObj): return ''\r\n  if cleanedMetaObj.stack: cleanedMetaObj.stack = cleanedMetaObj.stack.split(/\\r\\n?|\\n/)\r\n  `JSON.stringify(${ JSON.stringify(cleanedMetaObj) }, null, 4)`\r\n\r\nexport {\r\n  UserDebugLoggerTransport,\r\n}\r\n","import AutoLaunch from 'auto-launch'\r\n\r\nimport { logger } from './logging/logging.lsc'\r\n\r\nblueLossAutoLauncher = new AutoLaunch({\r\n  name: 'BlueLoss',\r\n  isHidden: true\r\n})\r\n\r\nenableRunOnStartup(firstRun):void ->\r\n  if firstRun and ISDEV: return\r\n  blueLossAutoLauncher.enable().catch((err):void ->\r\n    logger.error('enableRunOnStartup error: ', err)\r\n  )\r\n\r\ndisableRunOnStartup():void ->\r\n  blueLossAutoLauncher.disable().catch((err):void ->\r\n    logger.error('disableRunOnStartup error: ', err)\r\n  )\r\n\r\nexport {\r\n  enableRunOnStartup,\r\n  disableRunOnStartup,\r\n}\r\n","import path from 'path'\r\n\r\nimport { BrowserWindow } from 'electron'\r\n\r\ndevtronPath = path.resolve(__dirname, '..', 'node_modules', 'devtron')\r\nsettingsWindowDirPath = path.resolve(__dirname, 'components', 'settingsWindow', 'renderer')\r\nsettingsWindowHTMLfilePath = path.join(settingsWindowDirPath, 'settingsWindow.html')\r\nsettingsWindowCSSfilePath = path.join(settingsWindowDirPath, 'assets', 'styles', '*.*')\r\nsettingsWindowJSfilePath = path.join(settingsWindowDirPath, 'settingsWindowRendererMain-compiled.js')\r\nsettingsWindowIconFiles = path.join(settingsWindowDirPath, 'assets', 'icons', '*.*')\r\ndebugWindowDirPath = path.resolve(__dirname, 'components', 'debugWindow', 'renderer')\r\ndebugWindowHTMLfilePath = path.join(debugWindowDirPath, 'debugWindow.html')\r\ndebugWindowJSfilePath = path.join(debugWindowDirPath, 'debugWindowRendererMain-compiled.js')\r\nbluetoothRendererJSfilePath = path.resolve(__dirname, 'components', 'bluetooth', 'renderer', 'bluetoothRendererMain-compiled.js')\r\n\r\nsetUpDev():void ->\r\n  if !ISDEV: return\r\n  require('electron-reload')([\r\n    settingsWindowHTMLfilePath,\r\n    settingsWindowCSSfilePath,\r\n    settingsWindowJSfilePath,\r\n    settingsWindowIconFiles,\r\n    debugWindowHTMLfilePath,\r\n    debugWindowJSfilePath,\r\n    bluetoothRendererJSfilePath,\r\n  ])\r\n  BrowserWindow.addDevToolsExtension(devtronPath)\r\n  // auto open the settings window in dev so dont have to manually open it each time electron restarts\r\n  require('./settingsWindow/settingsWindow.lsc').showSettingsWindow()\r\n\r\nexport {\r\n  setUpDev\r\n}\r\n\r\n\r\n","\r\nimport { updateSetting, getSettings } from './settings.lsc'\r\n\r\naddNewDeviceToSearchFor(deviceToAdd: DeviceType):void ->\r\n  { deviceId } = deviceToAdd\r\n  if deviceIsInDevicesToSearchFor(deviceId): return\r\n  updateSetting('devicesToSearchFor',\r\n    {...getSettings().devicesToSearchFor, [ deviceId ]: deviceToAdd}\r\n  )\r\n\r\nremoveNewDeviceToSearchFor(deviceToRemove: DeviceType):void ->\r\n  { deviceId } = deviceToRemove\r\n  if !deviceIsInDevicesToSearchFor(deviceId): return\r\n  updateSetting('devicesToSearchFor', filterDevicesToSearchFor(deviceId))\r\n\r\nfilterDevicesToSearchFor(deviceIdToRemove: string):Object ->\r\n  {\r\n    ...for key deviceId, val device in getSettings().devicesToSearchFor:\r\n      if deviceId != deviceIdToRemove: { [ deviceId ]: device }\r\n  }\r\n\r\ndeviceIsInDevicesToSearchFor(deviceId: string):boolean ->\r\n  getSettings().devicesToSearchFor[deviceId]\r\n\r\nupdateTimeStampForSingleDeviceSearchingFor(deviceId: String, newTimeStamp: Number):Object ->\r\n  { devicesToSearchFor } = getSettings()\r\n  deviceToUpdate = devicesToSearchFor[deviceId]\r\n  updateSetting('devicesToSearchFor',\r\n    {...devicesToSearchFor, [ deviceId ]: {...deviceToUpdate, lastSeen: newTimeStamp }}\r\n  )\r\n\r\nupdateTimeStampForAllDevicesSearchingFor(newTimeStamp: Number):void ->\r\n  updateSetting('devicesToSearchFor',\r\n    {\r\n      ...for key deviceId, val device in getSettings().devicesToSearchFor:\r\n        {[deviceId]: {...device, lastSeen: newTimeStamp}}\r\n    }\r\n  )\r\n\r\nexport {\r\n  addNewDeviceToSearchFor,\r\n  removeNewDeviceToSearchFor,\r\n  updateTimeStampForAllDevicesSearchingFor,\r\n  updateTimeStampForSingleDeviceSearchingFor,\r\n}\r\n","import path from 'path'\r\nimport { app as electronApp } from 'electron'\r\n\r\nimport gawk from 'gawk'\r\nimport low from 'lowdb'\r\nimport FileSync from 'lowdb/adapters/FileSync'\r\n\r\n\r\nimport { defaultSettings } from './settingsDefaults.lsc'\r\nimport { initSettingsObservers } from './settingsObservers.lsc'\r\nimport { initSettingsIPClisteners } from './settingsIPClisteners.lsc'\r\nimport { updateTimeStampForAllDevicesSearchingFor } from './devices.lsc'\r\nimport { logSettingsUpdateForDebugMode } from '../logging/logSettingsUpdates.lsc'\r\nimport { tenYearsFromNow } from '../utils.lsc'\r\n\r\nsettingsDBpath = path.join(electronApp.getPath('userData'), 'blueloss-settings.json')\r\n\r\nlet db = null\r\nlet settings = null\r\n\r\ninitSettings():void ->\r\n  adapter = new FileSync(settingsDBpath)\r\n  now db = low(adapter)\r\n  db.defaults(defaultSettings).write()\r\n  now settings = gawk(db.getState())\r\n  initSettingsObservers(settings)\r\n  initSettingsIPClisteners()\r\n  /**\r\n  * When a user starts up BlueLoss after previously exiting, the\r\n  * lastSeen value will be out of date for the devices in\r\n  * devicesToSearchFor. This would cause BlueLoss to lock the\r\n  * system straight away because the lastSeen value + timeToLock\r\n  *  will be less than Date.now(). So to prevent this, we give all\r\n  * devices in devicesToSearchFor a lastSeen of 10 years from now.\r\n  * (when a device is seen again during a scan, lastSeen is updated.)\r\n  */\r\n  updateTimeStampForAllDevicesSearchingFor(tenYearsFromNow())\r\n\r\ngetSettings() -> settings\r\n\r\nupdateSetting(newSettingKey: string, newSettingValue: SettingsTypes):void ->\r\n  settings[newSettingKey] = newSettingValue\r\n  db.set(newSettingKey, newSettingValue).write()\r\n  logSettingsUpdateForDebugMode(newSettingKey, newSettingValue)\r\n\r\nexport {\r\n  initSettings,\r\n  updateSetting,\r\n  getSettings,\r\n}\r\n","\r\n\r\ndefaultSettings: {\r\n  blueLossEnabled: boolean,\r\n  runOnStartup: boolean,\r\n  trayIconColor: string,\r\n  devicesToSearchFor: Object,\r\n  timeToLock: number,\r\n  reportErrors: boolean,\r\n  firstRun: boolean,\r\n  settingsWindowPosition: SettingsWindowPositionType,\r\n  debugMode: boolean,\r\n} = {\r\n  blueLossEnabled: true,\r\n  runOnStartup: true,\r\n  trayIconColor: 'blue',\r\n  devicesToSearchFor: {},\r\n  timeToLock: 3,\r\n  reportErrors: true,\r\n  firstRun: true,\r\n  settingsWindowPosition: null,\r\n  debugMode: false,\r\n}\r\n\r\nexport {\r\n  defaultSettings\r\n}\r\n","import { ipcMain } from 'electron'\r\n\r\n\r\nimport { updateSetting } from './settings.lsc'\r\nimport { addNewDeviceToSearchFor, removeNewDeviceToSearchFor } from './devices.lsc'\r\n\r\ninitSettingsIPClisteners():void ->\r\n  ipcMain.on('renderer:setting-updated-in-ui', (event, settingName: string, settingValue: SettingsTypes):void ->\r\n    updateSetting(settingName, settingValue)\r\n  )\r\n  ipcMain.on('renderer:device-added-in-ui', (event, deviceToAdd: DeviceType):void ->\r\n    addNewDeviceToSearchFor(deviceToAdd)\r\n  )\r\n  ipcMain.on('renderer:device-removed-in-ui', (event, deviceToRemove: DeviceType):void ->\r\n    removeNewDeviceToSearchFor(deviceToRemove)\r\n  )\r\n\r\nexport {\r\n  initSettingsIPClisteners\r\n}\r\n","\r\nimport gawk from 'gawk'\r\n\r\nimport { settingsWindow } from '../settingsWindow/settingsWindow.lsc'\r\nimport { addRollbarLogging, removeRollbarLogging } from '../logging/logging.lsc'\r\nimport { changeTrayIcon, updateTrayMenu } from '../tray/tray.lsc'\r\nimport { enableRunOnStartup, disableRunOnStartup } from '../runOnStartup.lsc'\r\nimport { showDebugWindow, debugWindow } from '../debugWindow/debugWindow.lsc'\r\n\r\ninitSettingsObservers(settings):void ->\r\n  gawk.watch(settings, ['blueLossEnabled'], (enabled: boolean):void ->\r\n    settingsWindow?.webContents?.send('mainprocess:setting-updated-in-main', {blueLossEnabled: enabled})\r\n    updateTrayMenu()\r\n  )\r\n  gawk.watch(settings, ['reportErrors'], (enabled: boolean):void ->\r\n    if enabled: addRollbarLogging()\r\n    else: removeRollbarLogging()\r\n  )\r\n  gawk.watch(settings, ['runOnStartup'], (enabled: boolean):void ->\r\n    if enabled: enableRunOnStartup()\r\n    else: disableRunOnStartup()\r\n  )\r\n  gawk.watch(settings, ['debugMode'], (enabled: boolean):void ->\r\n    if enabled: showDebugWindow()\r\n    else: debugWindow?.close?()\r\n  )\r\n  gawk.watch(settings, ['trayIconColor'], changeTrayIcon)\r\n\r\nexport {\r\n  initSettingsObservers\r\n}\r\n","import path from 'path'\r\nimport url from 'url'\r\nimport { BrowserWindow, Menu, ipcMain } from 'electron'\r\n\r\nimport { getSettings, updateSetting } from '../settings/settings.lsc'\r\nimport { logger } from '../logging/logging.lsc'\r\n\r\nsettingsWindowRendererDirPath = path.join(__dirname, 'components', 'settingsWindow', 'renderer')\r\niconsDir = path.join(settingsWindowRendererDirPath, 'assets', 'icons')\r\nsettingsHTMLpath = url.format({\r\n  protocol: 'file',\r\n  slashes: true,\r\n  pathname: path.resolve(settingsWindowRendererDirPath, 'settingsWindow.html')\r\n})\r\nsettingsWindowProperties = {\r\n  width: 786,\r\n  height: 616,\r\n  title: 'BlueLoss',\r\n  autoHideMenuBar: true,\r\n  resizable: false,\r\n  fullscreenable: false,\r\n  fullscreen: false,\r\n  frame: false,\r\n  show: false,\r\n  webPreferences: {\r\n    textAreasAreResizable: false,\r\n    devTools: ISDEV,\r\n  }\r\n}\r\n\r\nlet settingsWindow = null\r\n\r\nshowSettingsWindow():void ->\r\n  if settingsWindow: return settingsWindow.show()\r\n\r\n  ipcMain.on('renderer:intitial-settings-request', event ->\r\n    event.returnValue = getSettings()\r\n  )\r\n\r\n  now settingsWindow = new BrowserWindow({\r\n    ...settingsWindowProperties,\r\n    ...getStoredWindowPosition(),\r\n    ...{ icon: getIconPath() }\r\n  })\r\n  settingsWindow.loadURL(settingsHTMLpath)\r\n  /****\r\n  * Remove the menu bar in prod, so they dont accidentally exit the app.\r\n  * Reload is for dev so we can easily reload the browserwindow with Ctrl+R.\r\n  */\r\n  settingsWindow.setMenu(\r\n    if ISDEV: Menu.buildFromTemplate([{role: 'reload'}]) else: null\r\n  )\r\n  if ISDEV: settingsWindow.webContents.openDevTools({ mode: 'undocked'})\r\n\r\n  settingsWindow.once('close', ():void ->\r\n    updateSetting('settingsWindowPosition', settingsWindow.getBounds())\r\n  )\r\n  settingsWindow.once('ready-to-show', ():void ->\r\n    settingsWindow.show()\r\n  )\r\n  settingsWindow.once('closed', ():void ->\r\n    now settingsWindow = null\r\n  )\r\n  settingsWindow.webContents.once('crashed', (event):void ->\r\n    logger.error('settingsWindow.webContents crashed', event)\r\n  )\r\n  settingsWindow.once('unresponsive', (event):void ->\r\n    logger.error('settingsWindow unresponsive', event)\r\n  )\r\n\r\ngetStoredWindowPosition():Object ->\r\n  { settingsWindowPosition } = getSettings()\r\n  if !settingsWindowPosition: return {}\r\n  { x: settingsWindowPosition.x, y: settingsWindowPosition.y }\r\n\r\ngetIconPath():string ->\r\n  iconFileName = `BlueLoss-${ getSettings().trayIconColor }-512x512.png`\r\n  path.join(iconsDir, iconFileName)\r\n\r\ntoggleSettingsWindow():void ->\r\n  if !settingsWindow:\r\n    showSettingsWindow()\r\n  elif settingsWindow.isVisible():\r\n    settingsWindow.close()\r\n\r\nexport {\r\n  showSettingsWindow,\r\n  toggleSettingsWindow,\r\n  settingsWindow,\r\n}\r\n","import path from 'path'\r\nimport { Tray, Menu, app as electronApp } from 'electron'\r\n\r\nimport { showSettingsWindow, toggleSettingsWindow } from '../settingsWindow/settingsWindow.lsc'\r\nimport { updateSetting, getSettings } from '../settings/settings.lsc'\r\n\r\nlet tray = null\r\ntrayIconsFolder = path.resolve(__dirname, 'components', 'tray', 'icons')\r\n\r\ninitTrayMenu():void ->\r\n  now tray = new Tray(getNewTrayIconPath(getSettings().trayIconColor))\r\n  tray.setContextMenu(createContextMenu())\r\n  tray.setToolTip('BlueLoss')\r\n  tray.on('double-click', toggleSettingsWindow)\r\n\r\ncreateContextMenu():Object ->\r\n  Menu.buildFromTemplate(\r\n    [\r\n      {\r\n        label: 'Open BlueLoss Settings',\r\n        click: showSettingsWindow\r\n      },\r\n      {\r\n        label: generateEnabledDisabledLabel(),\r\n        click: toggleEnabledFromTray\r\n      },\r\n      {\r\n        label: 'Quit BlueLoss',\r\n        click: electronApp.quit\r\n      }\r\n    ]\r\n  )\r\n\r\ngetNewTrayIconPath(trayIconColor: string):string ->\r\n  path.join(trayIconsFolder, `BlueLoss-${ trayIconColor }-128x128.png`)\r\n\r\ngenerateEnabledDisabledLabel():string ->\r\n  `${ if getSettings().blueLossEnabled: 'Disable' else: 'Enable' } BlueLoss`\r\n\r\nchangeTrayIcon(newTrayIconColor: string):void ->\r\n  tray.setImage(getNewTrayIconPath(newTrayIconColor))\r\n\r\nupdateTrayMenu():void ->\r\n  tray.setContextMenu(createContextMenu())\r\n\r\ntoggleEnabledFromTray():void ->\r\n  updateSetting('blueLossEnabled', !getSettings().blueLossEnabled)\r\n\r\nexport {\r\n  initTrayMenu,\r\n  changeTrayIcon,\r\n  createContextMenu,\r\n  updateTrayMenu,\r\n}\r\n","import tp from 'timeproxy'\r\nimport is from 'typa'\r\n\r\nimport { logger} from './logging/logging.lsc'\r\n\r\n/**\r\n * If you run Electron by pointing it to a js file that's not in the base parent directory with the\r\n * package.json it will report the Electron binary version rather than what's in your package.json.\r\n * https://github.com/electron/electron/issues/7085\r\n */\r\nappVersion = require('../../package.json').version\r\n\r\ngetProperAppVersion():string -> appVersion\r\n\r\nomitGawkFromSettings(settings) -> recursivelyOmitObjProperties(settings, ['__gawk__'])\r\n\r\nnoop() -> return\r\n\r\npipe(...fns) -> param -> fns.reduce((result, fn) -> fn(result), param)\r\n\r\nidentity(param) -> param\r\n\r\ntenYearsFromNow():number -> Date.now() + tp.FIVE_HUNDRED_WEEKS\r\n\r\nrecursivelyOmitObjProperties(obj: Object, propertyFiltersArr: Array<string> = []):Object ->\r\n  Object.keys(obj).reduce((newObj, propName) ->\r\n    for elem propertyToFilter in propertyFiltersArr:\r\n      if propertyToFilter === propName: return newObj\r\n    if is.obj(obj[propName]):\r\n      return {...newObj, [propName]: recursivelyOmitObjProperties(obj[propName], propertyFiltersArr)}\r\n    {...newObj, [propName]: obj[propName]}\r\n  , {})\r\n\r\nomitInheritedProperties(obj: Object):Object ->\r\n  Object.getOwnPropertyNames(obj).reduce((newObj, propName) ->\r\n    if is.obj(obj[propName]):\r\n      return {...newObj, [propName]: omitInheritedProperties(obj[propName])}\r\n    {...newObj, [propName]: obj[propName]}\r\n  , {})\r\n\r\ngenerateLogTimeStamp():String ->\r\n  today = new Date()\r\n  `[${ today.getHours() }:${ today.getMinutes() }:${ today.getSeconds() }]`\r\n\r\n/*****\r\n* Delay a little bit before exiting to allow the error to be sent to rollbar.\r\n*/\r\nbailOnFatalError(err):void ->\r\n  console.error(err)\r\n  logger?.error?(err)\r\n  setTimeout(() ->\r\n    process.exit(1)\r\n  , tp.THREE_SECONDS)\r\n\r\nexport {\r\n  omitGawkFromSettings,\r\n  omitInheritedProperties,\r\n  noop,\r\n  pipe,\r\n  identity,\r\n  tenYearsFromNow,\r\n  getProperAppVersion,\r\n  generateLogTimeStamp,\r\n  bailOnFatalError,\r\n}\r\n","import path from 'path'\r\n\r\nimport dotenv from 'dotenv'\r\n\r\n// http://bit.ly/2xEDMxk\r\ndotenv.config({path: path.resolve(__dirname, '..', 'config', '.env')})\r\n","module.exports = require(\"auto-launch\");","module.exports = require(\"dotenv\");","module.exports = require(\"electron\");","module.exports = require(\"electron-reload\");","module.exports = require(\"gawk\");","module.exports = require(\"is-empty\");","module.exports = require(\"lock-system\");","module.exports = require(\"lowdb\");","module.exports = require(\"lowdb/adapters/FileSync\");","module.exports = require(\"path\");","module.exports = require(\"rollbar\");","module.exports = require(\"timeproxy\");","module.exports = require(\"typa\");","module.exports = require(\"url\");","module.exports = require(\"util\");","module.exports = require(\"winston\");"],"sourceRoot":""}