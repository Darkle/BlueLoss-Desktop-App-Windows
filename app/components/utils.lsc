import tp from 'timeproxy'
import is from 'typa'

import { logger} from './logging/logging.lsc'

/**
 * If you run Electron by pointing it to a js file that's not in the base parent directory with the
 * package.json it will report the Electron binary version rather than what's in your package.json.
 * https://github.com/electron/electron/issues/7085
 */
appVersion = require('../../package.json').version

getProperAppVersion():string -> appVersion
omitGawkFromSettings(settings) -> recursivelyOmitObjProperties(settings, ['__gawk__'])
noop() -> return
pipe(...fns) -> param -> fns.reduce((result, fn) -> fn(result), param)
identity(param) -> param
tenYearsFromNow():number -> Date.now() + tp.FIVE_HUNDRED_WEEKS

recursivelyOmitObjProperties(obj: Object, propertyFiltersArr: Array<string> = []):Object ->
  Object.keys(obj).reduce((newObj, propName) ->
    for elem propertyToFilter in propertyFiltersArr:
      if propertyToFilter === propName: return newObj
    if is.obj(obj[propName]):
      return {...newObj, ...{ [propName]: recursivelyOmitObjProperties(obj[propName], propertyFiltersArr) }}
    {...newObj, ...{ [propName]: obj[propName] }}
  , {})

omitInheritedProperties(obj: Object):Object ->
  Object.getOwnPropertyNames(obj).reduce((newObj, propName) ->
    if is.obj(obj[propName]):
      return {...newObj, ...{ [propName]: omitInheritedProperties(obj[propName]) }}
    {...newObj, ...{ [propName]: obj[propName] }}
  , {})

generateLogTimeStamp():String ->
  today = new Date()
  `[${ today.getHours() }:${ today.getMinutes() }:${ today.getSeconds() }]`

bailOnFatalError(err):void ->
  console.error(err)
  logger?.error?(err)
  process.exit(1)

export {
  omitGawkFromSettings,
  omitInheritedProperties,
  noop,
  pipe,
  identity,
  tenYearsFromNow,
  getProperAppVersion,
  generateLogTimeStamp,
  bailOnFatalError,
}
