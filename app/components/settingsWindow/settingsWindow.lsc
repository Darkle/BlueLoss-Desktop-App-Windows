import path from 'path'
import url from 'url'
import { app as electronApp, BrowserWindow, Menu, ipcMain } from 'electron'

// import omit from 'lodash.omit'

import { getSettings, updateSetting } from '../settings/settings.lsc'
import { logger } from '../logging/logging.lsc'
// import { omitInheritedProperties, omitGawkFromSettings } from '../common/utils.lsc'

settingsWindowRendererDirPath = path.join(__dirname, 'components', 'settingsWindow', 'renderer')
iconsDir = path.join(settingsWindowRendererDirPath, 'assets', 'icons')
settingsHTMLpath = url.format({
  protocol: 'file',
  slashes: true,
  pathname: path.resolve(settingsWindowRendererDirPath, 'settingsWindow.html')
})
settingsWindowProperties = {
  ...{
    width: 786,
    height: 616,
    title: 'BlueLoss',
    autoHideMenuBar: true,
    resizable: false,
    fullscreenable: false,
    fullscreen: false,
    frame: false,
    show: false,
    icon: getIconPath(),
    webPreferences: {
      textAreasAreResizable: false,
      devTools: ISDEV,
    }
  },
  ...getStoredWindowPosition()
}
/****
* Remove the menu in alt menu bar in prod, so they dont accidentally exit the app.
* Reload is for dev so we can easily reload the browserwindow with Ctrl+R.
*/
settingsWindowMenu = if ISDEV: Menu.buildFromTemplate([{role: 'reload'}]) else: null
let settingsWindow = null

showSettingsWindow():void ->
  if settingsWindow: return settingsWindow.show()

  ipcMain.on('renderer:intitial-settings-request', event ->
    event.sender.send('mainprocess:intitial-settings-sent', getSettings())
  )

  now settingsWindow = new BrowserWindow({
    ...settingsWindowProperties,
    ...getStoredWindowPosition(),
    ...{ icon: getIconPath() }
  })
  settingsWindow.loadURL(settingsHTMLpath)
  settingsWindow.setMenu(settingsWindowMenu)
  if ISDEV: settingsWindow.webContents.openDevTools({ mode: 'undocked'})

  settingsWindow.once('close', ():void ->
    updateSetting('settingsWindowPosition', settingsWindow.getBounds())
  )
  settingsWindow.once('ready-to-show', ():void ->
    settingsWindow.show()
  )
  settingsWindow.once('closed', ():void ->
    now settingsWindow = null
    electronApp.dock?.hide()
  )
  settingsWindow.webContents.once('crashed', (event):void ->
    logger.error('settingsWindow.webContents crashed', event)
  )
  settingsWindow.once('unresponsive', (event):void ->
    logger.error('settingsWindow unresponsive', event)
  )

getStoredWindowPosition():Object ->
  { x, y } = getSettings().settingsWindowPosition
  { x, y }

getIconPath():string ->
  iconFileName = `BlueLoss-${ getSettings().trayIconColor }-512x512.png`
  path.join(iconsDir, iconFileName)

toggleSettingsWindow():void ->
  if !settingsWindow:
    showSettingsWindow()
  elif settingsWindow.isVisible():
    settingsWindow.close()

/**
 * Some settings are just used internally and never exposed to the user -
 * e.g. firstRun, settingsWindowPosition, etc.
 */
// createSettingsWindowInitialSettings():Object ->
//   omit(
//     omitGawkFromSettings(omitInheritedProperties(getSettings())),
//     ['firstRun', 'settingsWindowPosition', 'dateLastCheckedForAppUpdate', 'skipUpdateVersion']
//   )

export {
  showSettingsWindow,
  toggleSettingsWindow,
  settingsWindow,
}
