import path from 'path'
import url from 'url'
import { app as electronApp, BrowserWindow, Menu, ipcMain } from 'electron'

import { getSettings, updateSetting } from '../settings/settings.lsc'
import { logger } from '../logging/logging.lsc'

settingsWindowRendererDirPath = path.join(__dirname, 'components', 'settingsWindow', 'renderer')
iconsDir = path.join(settingsWindowRendererDirPath, 'assets', 'icons')
settingsHTMLpath = url.format({
  protocol: 'file',
  slashes: true,
  pathname: path.resolve(settingsWindowRendererDirPath, 'settingsWindow.html')
})
settingsWindowProperties = {
  width: 786,
  height: 616,
  title: 'BlueLoss',
  autoHideMenuBar: true,
  resizable: false,
  fullscreenable: false,
  fullscreen: false,
  frame: false,
  show: false,
  webPreferences: {
    textAreasAreResizable: false,
    devTools: ISDEV,
  }
}

let settingsWindow = null

showSettingsWindow():void ->
  if settingsWindow: return settingsWindow.show()

  ipcMain.on('renderer:intitial-settings-request', event ->
    event.returnValue = getSettings()
  )

  now settingsWindow = new BrowserWindow({
    ...settingsWindowProperties,
    ...getStoredWindowPosition(),
    ...{ icon: getIconPath() }
  })
  settingsWindow.loadURL(settingsHTMLpath)
  /****
  * Remove the menu in alt menu bar in prod, so they dont accidentally exit the app.
  * Reload is for dev so we can easily reload the browserwindow with Ctrl+R.
  */
  settingsWindow.setMenu(
    if ISDEV: Menu.buildFromTemplate([{role: 'reload'}]) else: null
  )
  if ISDEV: settingsWindow.webContents.openDevTools({ mode: 'undocked'})

  settingsWindow.once('close', ():void ->
    updateSetting('settingsWindowPosition', settingsWindow.getBounds())
  )
  settingsWindow.once('ready-to-show', ():void ->
    settingsWindow.show()
  )
  settingsWindow.once('closed', ():void ->
    now settingsWindow = null
    electronApp.dock?.hide()
  )
  settingsWindow.webContents.once('crashed', (event):void ->
    logger.error('settingsWindow.webContents crashed', event)
  )
  settingsWindow.once('unresponsive', (event):void ->
    logger.error('settingsWindow unresponsive', event)
  )

getStoredWindowPosition():Object ->
  { settingsWindowPosition } = getSettings()
  if !settingsWindowPosition: return {}
  { x: settingsWindowPosition.x, y: settingsWindowPosition.y }

getIconPath():string ->
  iconFileName = `BlueLoss-${ getSettings().trayIconColor }-512x512.png`
  path.join(iconsDir, iconFileName)

toggleSettingsWindow():void ->
  if !settingsWindow:
    showSettingsWindow()
  elif settingsWindow.isVisible():
    settingsWindow.close()

export {
  showSettingsWindow,
  toggleSettingsWindow,
  settingsWindow,
}
