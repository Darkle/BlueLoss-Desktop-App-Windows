import isEmpty from 'is-empty'

import { logger } from '../logging/logging.lsc'
import { DeviceType } from '../types/types.lsc'
import { getSettings } from '../settings/settings.lsc'
import { updateTimeStampForSingleDeviceSearchingFor } from '../settings/devices.lsc'
import { settingsWindow } from '../settingsWindow/settingsWindow.lsc'
import { pipe } from '../utils.lsc'

processDeviceListAndSendToSettingsWindow = pipe(
  dedupeDeviceList, addTimeStampToSeenDevices, sendDevicesCanSeeToSettingsWindow
)
/**
 * Note: handleScanResults doesn't get called from
 * ` scannerWindow.webContents.on('select-bluetooth-device', handleScanResults)`
 * if there are no results from the
 * `executeJavaScript(`navigator.bluetooth.requestDevice({acceptAllDevices: true})`, true)`
 * call. That's why we do the lockCheck in scanforDevices.
 */
handleScanResults(event, deviceList:Array<DeviceType>, callback):void ->
  event.preventDefault()
  logger.debug(`Found these Bluetooth devices in scan: `, { deviceList })
  { devicesToSearchFor } = getSettings()
  processDeviceListAndSendToSettingsWindow(deviceList)
  if isEmpty(devicesToSearchFor): return
  updateDevicesToSearchFor(devicesToSearchFor, deviceList)
  callback('')  // http://bit.ly/2kZhD74

sendDevicesCanSeeToSettingsWindow(processedDeviceList:Array<DeviceType>):void ->
  settingsWindow?.webContents?.send(
    'mainprocess:update-of-bluetooth-devices-can-see',
    { devicesCanSee: processedDeviceList }
  )
/**
* If any devices we are looking for showed up in the latest scan,
* update the device's lastSeen value to now in devicesToSearchFor.
*/
updateDevicesToSearchFor(devicesToSearchFor:Object, deviceList:Array<DeviceType>):void ->
  for elem { deviceId } in deviceList:
    if devicesToSearchFor[deviceId]:
      updateTimeStampForSingleDeviceSearchingFor(deviceId, Date.now())

addTimeStampToSeenDevices(deviceList: Array<DeviceType>):Array<DeviceType> ->
  [ ...for elem device in deviceList: [{...device, lastSeen: Date.now()}] ]

/*****
* Check for duplicates in deviceList cause of this bug (which I've run into too):
* https://github.com/electron/electron/issues/10800
* We remove duplicates, but also for any duplicates, we prefer to take the duplicate
* that has a device name (sometimes they have an empty string for a device name).
*/
dedupeDeviceList(deviceList: Array<DeviceType>):Array<DeviceType> ->
  deviceList.reduce((newDeviceList, newDevice) ->
    newDeviceId = newDevice.deviceId
    existingDevice = newDeviceList.find(device -> device.deviceId === newDeviceId )
    if !existingDevice: return [...newDeviceList, newDevice]
    if betterNamedDevice(existingDevice, newDevice):
      return [...newDeviceList.filter(device -> device.deviceId !== newDeviceId ), newDevice]
    newDeviceList
  , [])

betterNamedDevice(existingDevice:Object, newDevice:Object):Boolean ->
  existingDevice.deviceName.length === 0 and newDevice.deviceName.length > 0

export {
  handleScanResults,
}
