import path from 'path'
import url from 'url'
import { BrowserWindow } from 'electron'

import tp from 'timeproxy'
import pTimeout from 'p-timeout'

import { handleScanResults,sendDevicesCanSeeToSettingsWindow } from './handleScanResults.lsc'
import { logger } from '../logging/logging.lsc'
import { getSettings } from '../settings/settings.lsc'
import { lockSystemIfDeviceLost } from '../lockSystem/lockCheck.lsc'
import { generateLogTimeStamp } from '../utils.lsc'

bluetoothHiddenWindowHTMLpath = url.format({
  protocol: 'file',
  slashes: true,
  pathname: path.resolve(__dirname, 'components', 'bluetooth', 'renderer', 'bluetoothHiddenWindow.html')
})
bluetoothHiddenWindowProperties = {
  show: false,
  webPreferences: {
    experimentalFeatures: true // for web-bluetooth
  }
}
invokeUserGesture = true
let scannerWindow = null  // so it doesn't get garbage collected

init():void ->
  createBluetoothScannerWindow().then(scanforDevices)

createBluetoothScannerWindow():Promise ->
  new Promise((resolve):void ->
    now scannerWindow = new BrowserWindow(bluetoothHiddenWindowProperties)
    scannerWindow.loadURL(bluetoothHiddenWindowHTMLpath)

    scannerWindow.webContents.once('dom-ready', resolve)
    scannerWindow.webContents.on('select-bluetooth-device', handleScanResults)
    scannerWindow.webContents.once('crashed', (event):void ->
      logger.error('scannerWindow.webContents crashed', event)
    )
    scannerWindow.once('unresponsive', (event):void ->
      logger.error('scannerWindow unresponsive', event)
    )
  )

/*****
* On Electron 1.8.7 the `navigator.bluetooth.requestDevice` call takes about a
* minute to return results. Electron 2.0 and above don't take as long, but
* unfortunately those versions don't seem to return multiple devices, they only
* ever return one device.
*
* We use pTimeout here because if there are no devices around, `navigator.bluetooth.requestDevice`
* never seems to resolve, which means `scannerWindow.webContents.executeJavaScript`
* never resolves (or calls its callback), which means we get stuck here and don't do new scans.
*/
scanforDevices():void ->
  if !getSettings().blueLossEnabled:
    return setTimeout(scanforDevices, tp.TWENTY_SECONDS)
  logger.debug(`=======New Scan Started=======  ${ generateLogTimeStamp() }`)

  pTimeout(
    scannerWindow.webContents.executeJavaScript(
      `navigator.bluetooth.requestDevice({acceptAllDevices: true})`,
      invokeUserGesture,
    ),
    tp.EIGHTY_SECONDS
  )
  .catch(handleRequestDeviceErrors)
  .then(lockSystemIfDeviceLost)
  .then(scanforDevices)

/**
 * A NotFoundError is the norm on success.
 * A TimeoutError is the norm when no devices are found.
 * We also need to update the frontend settings window if there is a timeout,
 * as that means no devices were found.
 */
handleRequestDeviceErrors(err):void ->
  if err?.name === 'NotFoundError': return
  if err?.name === 'TimeoutError':
    return sendDevicesCanSeeToSettingsWindow([])
  logger.error(err)

export {
  init,
}

