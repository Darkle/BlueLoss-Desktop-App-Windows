import path from 'path'
import url from 'url'
import { BrowserWindow } from 'electron'

import { logger } from '../logging/logging.lsc'
import { getSettings, updateSetting } from '../settings/settings.lsc'
import { settingsWindow } from '../settingsWindow/settingsWindow.lsc'

debugWindowHTMLpath = url.format({
  protocol: 'file',
  slashes: true,
  pathname: path.resolve(__dirname, 'components', 'debugWindow', 'renderer', 'debugWindow.html')
})
let debugWindow = null

showDebugWindow():void ->
  if !getSettings().debugMode: return
  if debugWindow: return debugWindow.webContents.openDevTools({ mode: 'undocked'})
  createDebugWindow()

createDebugWindow():void ->
  now debugWindow = new BrowserWindow({ show: false})
  debugWindow.loadURL(debugWindowHTMLpath)
  debugWindow.webContents.openDevTools({ mode: 'undocked'})

  debugWindow.once('closed', ():void ->
    now debugWindow = null
  )
  debugWindow.webContents.once('devtools-opened', ():void ->
    logger.debug('Current BlueLoss settings:', getSettings())
    logger.debug('Note: Scans take about a minute to complete.')
  )
  debugWindow.webContents.once('devtools-closed', ():void ->
    updateSetting('debugMode', false)
    settingsWindow?.webContents?.send('mainprocess:setting-updated-in-main', {debugMode: false})
    debugWindow?.close()
  )
  debugWindow.webContents.once('crashed', (event):void ->
    logger.error('debugWindow.webContents crashed', event)
  )
  debugWindow.once('unresponsive', (event):void ->
    logger.error('debugWindow unresponsive', event)
  )

export {
  debugWindow,
  showDebugWindow,
}
