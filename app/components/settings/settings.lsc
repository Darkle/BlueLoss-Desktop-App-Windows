import path from 'path'
import { app as electronApp } from 'electron'

import gawk from 'gawk'
import low from 'lowdb'
import FileSync from 'lowdb/adapters/FileSync'

import { SettingsTypes } from '../types/types.lsc'
import { defaultSettings } from './settingsDefaults.lsc'
import { initSettingsObservers } from './settingsObservers.lsc'
import { initSettingsIPClisteners } from './settingsIPClisteners.lsc'
import { updateTimeStampForAllDevicesSearchingFor } from './devices.lsc'
import { logSettingsUpdateForDebugMode } from '../logging/logSettingsUpdates.lsc'
import { tenYearsFromNow } from '../utils.lsc'

settingsDBpath = path.join(electronApp.getPath('userData'), 'blueloss-settings.json')

let db = null
let settings = null

initSettings():void ->
  adapter = new FileSync(settingsDBpath)
  now db = low(adapter)
  db.defaults(defaultSettings).write()
  now settings = gawk(db.getState())
  initSettingsObservers(settings)
  initSettingsIPClisteners()
  /**
  * When a user starts up BlueLoss after previously exiting, the
  * lastSeen value will be out of date for the devices in
  * devicesToSearchFor. This would cause BlueLoss to lock the
  * system straight away because the lastSeen value + timeToLock
  *  will be less than Date.now(). So to prevent this, we give all
  * devices in devicesToSearchFor a lastSeen of 10 years from now.
  * (when a device is seen again during a scan, lastSeen is updated.)
  */
  updateTimeStampForAllDevicesSearchingFor(tenYearsFromNow())

getSettings() -> settings

updateSetting(newSettingKey: string, newSettingValue: SettingsTypes):void ->
  settings[newSettingKey] = newSettingValue
  db.set(newSettingKey, newSettingValue).write()
  logSettingsUpdateForDebugMode(newSettingKey, newSettingValue)

export {
  initSettings,
  updateSetting,
  getSettings,
}
