import { DeviceType } from '../types/types.lsc'
import { updateSetting, getSettings } from './settings.lsc'

addNewDeviceToSearchFor(deviceToAdd: DeviceType):void ->
  { deviceId } = deviceToAdd
  if deviceIsInDevicesToSearchFor(deviceId): return
  updateSetting('devicesToSearchFor',
    {...getSettings().devicesToSearchFor, [ deviceId ]: deviceToAdd}
  )

removeDeviceSearchingFor(deviceToRemove: DeviceType):void ->
  { deviceId } = deviceToRemove
  if !deviceIsInDevicesToSearchFor(deviceId): return
  updateSetting('devicesToSearchFor', filterDevicesToSearchFor(deviceId))

filterDevicesToSearchFor(deviceIdToRemove: string):Object ->
  {
    ...for key deviceId, val device in getSettings().devicesToSearchFor:
      if deviceId != deviceIdToRemove: { [ deviceId ]: device }
  }

deviceIsInDevicesToSearchFor(deviceId: string):Boolean ->
  !!getSettings().devicesToSearchFor[deviceId]

updateTimeStampForSingleDeviceSearchingFor(deviceId: String, newTimeStamp: Number):Object ->
  { devicesToSearchFor } = getSettings()
  deviceToUpdate = devicesToSearchFor[deviceId]
  updateSetting('devicesToSearchFor',
    {...devicesToSearchFor, [ deviceId ]: {...deviceToUpdate, lastSeen: newTimeStamp }}
  )

updateTimeStampForAllDevicesSearchingFor(newTimeStamp: Number):void ->
  updateSetting('devicesToSearchFor',
    {
      ...for key deviceId, val device in getSettings().devicesToSearchFor:
        {[deviceId]: {...device, lastSeen: newTimeStamp}}
    }
  )

export {
  addNewDeviceToSearchFor,
  removeDeviceSearchingFor,
  updateTimeStampForAllDevicesSearchingFor,
  updateTimeStampForSingleDeviceSearchingFor,
}
