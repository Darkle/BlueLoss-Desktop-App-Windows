if !process.env.NODE_ENV: process.env.NODE_ENV = "production"
import '../../config/env.lsc'
import { app as electronApp } from 'electron'

import { logger } from '../common/logging/logging.lsc'
import { setUpDev } from '../common/setUpDev.lsc'
import { init as startBluetoothScanning } from '../bluetooth/blueToothMain.lsc'
import { getSettings, updateSetting } from '../settings/settings.lsc'
import { noop } from '../common/utils.lsc'
import { initTrayMenu } from '../tray/tray.lsc'
import { showSettingsWindow } from '../settingsWindow/settingsWindow.lsc'
import { enableRunOnStartup } from '../common/runOnStartup.lsc'
import { checkForUpdate as checkForAppUpdate } from '../appUpdates/appUpdates.lsc'

if electronApp.makeSingleInstance(noop): electronApp.quit()

electronApp.once('ready', ():void ->
  { firstRun } = getSettings()

  if ISDEV: setUpDev()
  if !firstRun: electronApp.dock?.hide()

  initTrayMenu()
  startBluetoothScanning()
  checkForAppUpdate()

  if firstRun:
    updateSetting('firstRun', !firstRun)
    showSettingsWindow()
    enableRunOnStartup(firstRun)
)

electronApp.on('window-all-closed', noop)

process.on('unhandledRejection', logger.error)
process.on('uncaughtException', (err):void ->
  logger.error(err)
  process.exit(1)
)

